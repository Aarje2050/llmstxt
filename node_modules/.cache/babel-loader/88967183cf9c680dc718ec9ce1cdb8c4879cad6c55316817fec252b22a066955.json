{"ast":null,"code":"var _jsxFileName = \"/Users/rajeshjat/My Development Corner/LLMstxt/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport UrlInput from './components/UrlInput';\nimport FilePreview from './components/FilePreview';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [activeUrl, setActiveUrl] = useState(null);\n  const [activeMdFile, setActiveMdFile] = useState(null);\n  const handleScrape = async (urls, bulkMode = false) => {\n    setLoading(true);\n    try {\n      // Show initial toast\n      const toastId = toast.info('Extracting website content. This may take a moment...', {\n        autoClose: false\n      });\n\n      // Make API call to backend with bulkMode flag\n      const response = await axios.post('http://127.0.0.1:5000/api/scrape', {\n        urls,\n        bulkMode\n      }, {\n        timeout: 60000\n      } // Increase timeout for larger sites\n      );\n\n      // Update toast\n      toast.update(toastId, {\n        render: 'Content extracted successfully!',\n        type: toast.TYPE.SUCCESS,\n        autoClose: 3000\n      });\n\n      // Process the results\n      setResults(response.data);\n\n      // Set the first URL as active\n      if (Object.keys(response.data).length > 0) {\n        const firstUrl = Object.keys(response.data)[0];\n        setActiveUrl(firstUrl);\n\n        // If there are MD files for this URL, set the first one as active\n        const urlData = response.data[firstUrl];\n        if (urlData.status === 'success' && urlData.md_files) {\n          const mdUrls = Object.keys(urlData.md_files);\n          if (mdUrls.length > 0) {\n            setActiveMdFile(mdUrls[0]);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error scraping URLs:', error);\n      let errorMessage = 'Failed to extract content.';\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage += ` Server error: ${error.response.status}`;\n        if (error.response.data && error.response.data.error) {\n          errorMessage += ` - ${error.response.data.error}`;\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        errorMessage += ' No response from server. Please check if the backend is running.';\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        errorMessage += ` Error: ${error.message}`;\n      }\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleUpdateLlmsTxt = (url, content) => {\n    setResults(prev => ({\n      ...prev,\n      [url]: {\n        ...prev[url],\n        llms_txt: content\n      }\n    }));\n    toast.success('LLMs.txt content updated');\n  };\n  const handleUpdateMdFile = (url, fileUrl, content) => {\n    setResults(prev => ({\n      ...prev,\n      [url]: {\n        ...prev[url],\n        md_files: {\n          ...prev[url].md_files,\n          [fileUrl]: {\n            ...prev[url].md_files[fileUrl],\n            content: content\n          }\n        }\n      }\n    }));\n    toast.success('Markdown file content updated');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(UrlInput, {\n          onScrape: handleScrape,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginLeft: '1rem'\n            },\n            children: \"Extracting content from website. This may take a moment...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), results && activeUrl && !loading && /*#__PURE__*/_jsxDEV(FilePreview, {\n          results: results,\n          activeUrl: activeUrl,\n          activeMdFile: activeMdFile,\n          onUrlChange: setActiveUrl,\n          onMdFileChange: setActiveMdFile,\n          onUpdateLlmsTxt: handleUpdateLlmsTxt,\n          onUpdateMdFile: handleUpdateMdFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UHtr8rBdldrbjHnml0ThCddgUCA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Footer","UrlInput","FilePreview","ToastContainer","toast","axios","jsxDEV","_jsxDEV","App","_s","loading","setLoading","results","setResults","activeUrl","setActiveUrl","activeMdFile","setActiveMdFile","handleScrape","urls","bulkMode","toastId","info","autoClose","response","post","timeout","update","render","type","TYPE","SUCCESS","data","Object","keys","length","firstUrl","urlData","status","md_files","mdUrls","error","console","errorMessage","request","message","handleUpdateLlmsTxt","url","content","prev","llms_txt","success","handleUpdateMdFile","fileUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onScrape","style","marginLeft","onUrlChange","onMdFileChange","onUpdateLlmsTxt","onUpdateMdFile","position","_c","$RefreshReg$"],"sources":["/Users/rajeshjat/My Development Corner/LLMstxt/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport UrlInput from './components/UrlInput';\nimport FilePreview from './components/FilePreview';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [activeUrl, setActiveUrl] = useState(null);\n  const [activeMdFile, setActiveMdFile] = useState(null);\n  \n  const handleScrape = async (urls, bulkMode = false) => {\n    setLoading(true);\n    try {\n      // Show initial toast\n      const toastId = toast.info('Extracting website content. This may take a moment...', { autoClose: false });\n      \n      // Make API call to backend with bulkMode flag\n      const response = await axios.post('http://127.0.0.1:5000/api/scrape', \n        { urls, bulkMode }, \n        { timeout: 60000 }  // Increase timeout for larger sites\n      );\n      \n      // Update toast\n      toast.update(toastId, { \n        render: 'Content extracted successfully!', \n        type: toast.TYPE.SUCCESS,\n        autoClose: 3000\n      });\n      \n      // Process the results\n      setResults(response.data);\n      \n      // Set the first URL as active\n      if (Object.keys(response.data).length > 0) {\n        const firstUrl = Object.keys(response.data)[0];\n        setActiveUrl(firstUrl);\n        \n        // If there are MD files for this URL, set the first one as active\n        const urlData = response.data[firstUrl];\n        if (urlData.status === 'success' && urlData.md_files) {\n          const mdUrls = Object.keys(urlData.md_files);\n          if (mdUrls.length > 0) {\n            setActiveMdFile(mdUrls[0]);\n          }\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error scraping URLs:', error);\n      \n      let errorMessage = 'Failed to extract content.';\n      \n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage += ` Server error: ${error.response.status}`;\n        if (error.response.data && error.response.data.error) {\n          errorMessage += ` - ${error.response.data.error}`;\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        errorMessage += ' No response from server. Please check if the backend is running.';\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        errorMessage += ` Error: ${error.message}`;\n      }\n      \n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleUpdateLlmsTxt = (url, content) => {\n    setResults(prev => ({\n      ...prev,\n      [url]: {\n        ...prev[url],\n        llms_txt: content\n      }\n    }));\n    toast.success('LLMs.txt content updated');\n  };\n  \n  const handleUpdateMdFile = (url, fileUrl, content) => {\n    setResults(prev => ({\n      ...prev,\n      [url]: {\n        ...prev[url],\n        md_files: {\n          ...prev[url].md_files,\n          [fileUrl]: {\n            ...prev[url].md_files[fileUrl],\n            content: content\n          }\n        }\n      }\n    }));\n    toast.success('Markdown file content updated');\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      \n      <main className=\"main-content\">\n        <div className=\"container\">\n          <UrlInput onScrape={handleScrape} loading={loading} />\n          \n          {loading && (\n            <div className=\"loader\">\n              <div className=\"loader-spinner\"></div>\n              <p style={{ marginLeft: '1rem' }}>Extracting content from website. This may take a moment...</p>\n            </div>\n          )}\n          \n          {results && activeUrl && !loading && (\n            <FilePreview \n              results={results} \n              activeUrl={activeUrl}\n              activeMdFile={activeMdFile}\n              onUrlChange={setActiveUrl}\n              onMdFileChange={setActiveMdFile}\n              onUpdateLlmsTxt={handleUpdateLlmsTxt}\n              onUpdateMdFile={handleUpdateMdFile}\n            />\n          )}\n        </div>\n      </main>\n      \n      <Footer />\n      <ToastContainer position=\"bottom-right\" />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}